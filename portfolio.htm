<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Jose Batista Portfolio</title>
    
     <style type="text/css">    
        *
        {
            margin-top: 0em;
            margin-bottom: 0em;
            font-size: x-small;
        }
        body
        {
            margin: 20px;
            margin-bottom: 40px;
        }
        
        h1 h2 h3 h4 h5 h6 h7 h8{
         clear: both;
        }
        
        h1
        {
            font-family: "Arial";
            font-size: large;
            font-weight: bold;
            margin-top: 1em;
            margin-bottom: 1em;
        }
        
        h2
        {
           font-family: "Arial", Times, serif;
           font-size: medium;
           font-weight: bold;
           text-decoration: underline;
        }
        
        td{
         font-size: small;
         font-style: italic;
        }
        
        table{
         margin-top: 4em;
        }
        
        img{
            margin: 1em;
        }
        
        div.section
        {
            margin-top: 3em;
            margin-bottom: 3em;
            clear: both;
        }
        div.header{
            margin-bottom: 4em;
        }
        div.header h1
        {
            margin-bottom: .3em;
        }
        div.job
        {
            margin-top: 1.5em;
            margin-bottom: 4em;            
        }        
        div.job h3
        {
            margin-top: 1em;
            margin-bottom: 0em;
            font-size: small;
            font-weight: bold;
            clear: both;
        }
        
        div.job h4{
         margin-top: 3em;
         font-size: small;
        }
        
        div.header p
        {
            background-color: #C0C0C0;
            font-size: small;
            font-family: Arial;                        
            margin-bottom: 1em;
        }
        p{
         font-size: small;
         margin-bottom: 1em;
         margin-right: 4em;
         margin-top: 0em;
        }
        
        p,li
        {
             
            font-size: small;
            font-family: "Arial";    
        }
        
        li em
        {
            font-weight: 600;
            font-style: normal;
            margin: 0px;
            padding: 0px;
        }
        
        div.job span.dur
        {
            font-style: italic;
        }
        
        div.job ul
        {
            list-style-type: square;
            margin-top: 0em;
            margin-bottom: 0em;
        }
        
        </style>
    
</head>
<body>

<div class="header">
<h1> Jose A. Batista </h1>

<p>
<em>Project Portfolio/Work Experience</em> <br/>

   <a href="mailto:j.a.batista1@gmail.com">j.a.batista1@gmail.com</a><br>
   843-957-1685</p>
</div>

<div class="section">

<div class="job">
<h2>APL Logistics, Menlo Worldwide<br />
IT Support and Software Development</h2>

<h3>Overview</h3>
<p>
   <img alt="Conveyor" src="Images/conveyor.jpg" align="left" />From 2005 to 2008, I held the role of primary IT resource at Thomson’s consumer electronics warehouse in Indianapolis, 
   including maintanence and further development of a previous project, &quot;WMS 
   Batch&quot;, detailed below. I formulated queries and developed reports for 
   billing, inventory, and productivity. Additionally, my responsibilities included tracking, prioritizing, troubleshooting and resolving problems  
   so as to improve and maintain efficiency. I maintained backups and deployed system updates. I established and implemented policies to minimize risks to data and uptime. In addition to hands-on application of computing skills, I accomplished these goals through interaction with managers, warehouse staff, vendors, and customer staff.
</p>
<p>
At 900,000 ft<sup>2</sup> of floor space, the warehouse was Thomson’s largest 
   facility in the Americas. I supported users of 100 PC workstations throughout the 
   site, including hardware, OS, and standard office/reporting applications, plus 
   network printers. Using Wavelink products, I configured and managed 450 wireless 
   portable computers located in Indianapolis, Toronto, California, and Mexico, 
   sometimes applying my comprehension of written and spoken Spanish. I prepare custom labels in Zebra ZPL, 
   for bulk printing. My responsibilities extend into networking and telephony. Finally, I provided server and control system support for 1.3 miles of automated pick-and-pass conveyor until April 2007, when Thomson sold the associated business.&nbsp;
</p>

<h3>Technologies Applied</h3>
<p>Microsoft Visual C++, SQL Server, C#, .NET, Business Objects, Oracle, AIX</p>
</div>


<div class="job">
<h2>Thomson </h2>
   <h2>"WMS Batch" Shipping Software</h2>
<h3>Overview</h3>
<p>
<!-- img alt="Conveyor" src="Images/conveyor.jpg"  -->
In 2002, I developed the WMS Batch application for Thomson Consumer Electronics, Inc. This program processes outgoing truckload shipments and is utilized by warehouse personnel at several sites. The program’s two basic functions can be 
   summarized as shipment verification and data collection. The program 
   resides on handheld computers and, to promote speed and accuracy, most input is via the device’s integrated bar code reader.
</p>


<p style="font-family: 'Lucida Console'; background-color: #C0C0C0; border-style: solid; width: 14em;">
SCAN SHIPMENTS&nbsp; JOEB <br />
SCAC:  AVRT <br/>
<br/>
Items: 10 <br/>
ENTER SERIAL : <br/>
__________________ <br/>
<br/>
NON-SCM(r)          DOMESTIC<br/>
</p>


<h4>Shipment Accuracy Verification</h4>

<p>Users utilize WMS Batch to verify the accuracy of shipments as each is staged on the warehouse floor prior to 
   loading on the trailer. The details of a shipment are retrieved wirelessly from the 
   Thomson&#39;s warehouse management system (Yantra WMS). WMS Batch then prompts the user to collect appropriate shipment data from product labeling, and it verifies that this matches the intended contents of the load. Verification consists, in part, of these items:</p>

<ul>
<li>Serial numbers are verified to be unique and non-duplicated, reducing user error</li>
<li>An automatic product recall search is performed in a remote Oracle database</li>
<li>To help ensure order accuracy, PO numbers and product model numbers are verified to be correct for the order</li>
<li>Product quantities are verified in order to avoid the cost associated with over or under-shipment</li>
</ul>

<h4>Data Collection</h4>
<p>In addition to shipment verification, the application simultaneously serves as a data collection tool. This data is uploaded to corporate servers for archival; for customer support and order-tracking services.</p>

<ul>
<li>Serial numbers are collected from products such as satellite receivers. This allows Thomson to keep track of the destination of each individual unit, essential to warranty fulfillment and prevention of fraud and theft</li>
<li>Product counts are uploaded to the existing Yantra WMS application. This serves as documentation of shipment contents and enables 
   subsequent inventory, manifesting, and billing transactions</li>
</ul>

<h3>Details</h3>
<p><img alt="Portable Terminal" src="Images/term.gif" align="left" height="90" 
      width="60"/>I wrote WMS Batch in Visual C++ 1.52, and it runs on the DOS-based model PDT-7542 wireless handheld computer by Symbol Technologies 
   (now Motorola). 802.11 wireless Ethernet allows raw TCP/IP communication with the “dumpstation”, a custom service 
   which I programmed, running on a Windows NT PC. The dumpstation provides the interface between WMS Batch and Yantra WMS, an Oracle-based application running on an AIX server. As part of a subsequent project, I wrote the server-side Pro*C process which permits the DOS device to query the Oracle database for product recalls.</p>

<table>
   <tr>
      <td>
         &nbsp;</td>
      <td>
         &larr;&nbsp;→</td>
      <td>
         Dumpstation</td>
      <td style="text-align: right">
         &larr;&nbsp;&rarr;</td>
      <td style="text-align: left">
         &nbsp;Yantra WMS</td>
      <td style="text-align: left">
         &larr;&nbsp;&rarr;</td>
      <td>
         &nbsp;</td>
   </tr>
   <tr>
      <td>
         &nbsp;WMS Batch ←&nbsp;→ 802.11 Wireless ← → </td>
      <td>
         &nbsp;</td>
      <td>
         &nbsp;</td>
      <td>
         &nbsp;</td>
      <td>
         &nbsp;</td>
      <td>
         &nbsp;</td>
      <td>
         Oracle</td>
   </tr>
   <tr>
      <td>&nbsp;</td>
      <td style="text-align: center">
          &larr;&nbsp;&rarr;</td>
      <td style="text-align: center" colspan="3">
          AIX Service (in Pro*C) </td>
      <td style="text-align: center">
          &larr;&nbsp;&rarr;</td>
      <td>
         &nbsp;</td>
   </tr>
</table>
</div>
<div class="job">
<h2>Aearo </h2>
   <h2>Print Controller</h2>

<h3>Overview</h3>
<p>The Aearo Print Controller queues and monitors the printing of large batches of shipping labels concurrently to multiple high-speed thermal printers. It serves as a label-printing utility for an existing picking/shipping application.</p>

<img alt="Screenshot" src="Images/aearo.jpg" height="200" width = "400"/>

<p>Project benefits:</p>
<ul>
<li>Extended application lifetime. The original picking/shipping application relied on discontinued printers for which parts and service 
   were dwindling. I ported all existing label code to produce output suitable for current equipment</li>
<li>Time savings. The main picking/shipping application is freed for picking and shipping tasks even while batches of thousands of labels are running on multiple printers. Prior to this project, the entire application could become tied up for hours while printing to a single printer</li>
<li>Reprint capability. The Print Controller stores all label data for a configurable number of days, after which it is purged. Batches can be reprinted without interfering with the picking/shipping application</li>
</ul>

<h3>Details</h3>
<p>I wrote the Aearo Print Controller primarily in Visual Basic, as per customer 
   specification. A DLL written in C provides some interfaces to the Windows printing APIs. I modified the existing picking/shipping application, developed in-house by Aearo in FoxPro, to incorporate support for the Print Controller. In addition, I ported all label layout code from the discontinued Sato line of printers to Zebra’s ZPL.</p>
</div>
<div class="job">
<h2>Logan Engineering</h2>
   <h2>&nbsp;Fuel System Tester
I/O Update</h2>

<h3>Overview</h3>
<p><img alt="Tester" src="Images/tester.gif" align="left"/>The Fuel System Tester is a custom-built quality-assurance device used by Modine Manufacturing Co. to verify the proper function of their automotive fuel system components. The machine consists primarily of a specialized test fixture, a PC running custom software, and an electronic meter, all integrated into one system.</p> 
<p>Two generations of this system were built. My contribution consisted of the software changes necessary to implement the second generation, which utilized a newer version of the multimeter component.</p>

<h3>Details</h3>
<p>
Users operate the tester by first locking the product into the test fixture. 
   They initiate the test by placing a finger from each hand in a proximity sensor, 
   confirming that the hands are clear of high voltage. The software responds to 
   the proximity sensors by commencing the test process. The multimeter probes are 
   routed to the appropriate terminals via a network of relays. Commands are sent 
   via RS-232 to the automatic multimeter which returns a reading. In this fashion, 
   various types of readings are performed across corresponding terminal pairs in 
   rapid succession. Electrical properties tested include resistance, capacitance, 
   and inductance. These are displayed to the operator at the end of testing, all 
   of which takes roughly four seconds per unit. Each reading is compared to a 
   configurable threshold, and a simple pass/fail result is displayed.</p>

            <table>
               <tr>
                  <td style="text-align: left">
                     Safety Interlock    Safety Interlock</td>
                  <td style="text-align: right">
                     &rarr;</td>
                  <td style="text-align: center">
                      Digital I/O Card</td>
                  <td style="text-align: right">
                     &rarr;</td>
                  <td>
                     &nbsp;</td>
               </tr>
               <tr>
                  <td>
                     &nbsp;</td>
                  <td>
                     &nbsp;</td>
                  <td>
                     &nbsp;</td>
                  <td>
                     &nbsp;</td>
                  <td>
                     Custom Software</td>
               </tr>
               <tr >
                  <td style="text-align: right">
                     Device Under Test&nbsp; </td>
                  <td style="text-align: center">
                     &larr;&nbsp;&rarr;</td>
                  <td style="text-align: center">
                      Automatic Multimeter</td>
                  <td style="text-align: center">
                     &larr;&nbsp;&rarr;</td>
                  <td>
                     &nbsp;</td>
               </tr>
            </table>
</div>

</div>         
</body>
</html>
